
mic_pay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003dc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000474  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cec  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dc  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c4  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c2  00000000  00000000  00002787  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_11>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	bb 00       	.word	0x00bb	; ????
  6a:	d3 00       	.word	0x00d3	; ????
  6c:	bd 00       	.word	0x00bd	; ????
  6e:	bf 00       	.word	0x00bf	; ????
  70:	c1 00       	.word	0x00c1	; ????
  72:	c3 00       	.word	0x00c3	; ????
  74:	c5 00       	.word	0x00c5	; ????
  76:	c7 00       	.word	0x00c7	; ????
  78:	c9 00       	.word	0x00c9	; ????
  7a:	cb 00       	.word	0x00cb	; ????
  7c:	cd 00       	.word	0x00cd	; ????
  7e:	cf 00       	.word	0x00cf	; ????

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	ec ed       	ldi	r30, 0xDC	; 220
  94:	f3 e0       	ldi	r31, 0x03	; 3
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a4 e0       	ldi	r26, 0x04	; 4
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a5 30       	cpi	r26, 0x05	; 5
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
  b6:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <tecla_lida>:

// Função para receber 8bits dados 2 bits parada
unsigned char USART_recebe(void){
	while(!(UCSR0A & (1<<RXC0)));							// espera algum dado ser recebido (registrador)
	return UDR0;											// retorna dado recebido
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8f 78       	andi	r24, 0x8F	; 143
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	8f 60       	ori	r24, 0x0F	; 15
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	26 c0       	rjmp	.+76     	; 0x120 <tecla_lida+0x62>
  d4:	9a b1       	in	r25, 0x0a	; 10
  d6:	20 e1       	ldi	r18, 0x10	; 16
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	08 2e       	mov	r0, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <tecla_lida+0x24>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <tecla_lida+0x20>
  e6:	29 2b       	or	r18, r25
  e8:	2a b9       	out	0x0a, r18	; 10
  ea:	e7 ec       	ldi	r30, 0xC7	; 199
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <tecla_lida+0x30>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <tecla_lida+0x36>
  f4:	00 00       	nop
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	10 c0       	rjmp	.+32     	; 0x11a <tecla_lida+0x5c>
  fa:	26 b1       	in	r18, 0x06	; 6
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	09 2e       	mov	r0, r25
 100:	02 c0       	rjmp	.+4      	; 0x106 <tecla_lida+0x48>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <tecla_lida+0x44>
 10a:	20 fd       	sbrc	r18, 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <tecla_lida+0x5a>
 10e:	29 2f       	mov	r18, r25
 110:	22 0f       	add	r18, r18
 112:	92 0f       	add	r25, r18
 114:	89 0f       	add	r24, r25
 116:	08 95       	ret
 118:	9f 5f       	subi	r25, 0xFF	; 255
 11a:	94 30       	cpi	r25, 0x04	; 4
 11c:	70 f3       	brcs	.-36     	; 0xfa <tecla_lida+0x3c>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	c0 f2       	brcs	.-80     	; 0xd4 <tecla_lida+0x16>
 124:	89 e1       	ldi	r24, 0x19	; 25
 126:	08 95       	ret

00000128 <teclaDebouce>:
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	0e 94 5f 00 	call	0xbe	; 0xbe <tecla_lida>
 132:	18 2f       	mov	r17, r24
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	0f c0       	rjmp	.+30     	; 0x156 <teclaDebouce+0x2e>
 138:	8f e7       	ldi	r24, 0x7F	; 127
 13a:	9e e3       	ldi	r25, 0x3E	; 62
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <teclaDebouce+0x14>
 140:	00 c0       	rjmp	.+0      	; 0x142 <teclaDebouce+0x1a>
 142:	00 00       	nop
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <tecla_lida>
 148:	c8 2f       	mov	r28, r24
 14a:	18 13       	cpse	r17, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <teclaDebouce+0x2a>
 14e:	df 5f       	subi	r29, 0xFF	; 255
 150:	01 c0       	rjmp	.+2      	; 0x154 <teclaDebouce+0x2c>
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	1c 2f       	mov	r17, r28
 156:	da 30       	cpi	r29, 0x0A	; 10
 158:	78 f3       	brcs	.-34     	; 0x138 <teclaDebouce+0x10>
 15a:	8c 2f       	mov	r24, r28
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	08 95       	ret

00000164 <acao_tecla>:
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	8c 30       	cpi	r24, 0x0C	; 12
 168:	91 05       	cpc	r25, r1
 16a:	d8 f4       	brcc	.+54     	; 0x1a2 <acao_tecla+0x3e>
 16c:	fc 01       	movw	r30, r24
 16e:	ec 5c       	subi	r30, 0xCC	; 204
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__tablejump2__>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	08 95       	ret
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	08 95       	ret
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	08 95       	ret
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	08 95       	ret
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	08 95       	ret
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	08 95       	ret
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	08 95       	ret
 192:	89 e0       	ldi	r24, 0x09	; 9
 194:	08 95       	ret
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	08 95       	ret
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	08 95       	ret
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	08 95       	ret
 1a2:	89 e1       	ldi	r24, 0x19	; 25
 1a4:	08 95       	ret
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	08 95       	ret

000001aa <write>:


void write(uint8_t bitCmd)
{
	//coloca zero na portaD
    lcdPort &= ~(1<<PORTB7);
 1aa:	95 b1       	in	r25, 0x05	; 5
 1ac:	9f 77       	andi	r25, 0x7F	; 127
 1ae:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB6);
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	9f 7b       	andi	r25, 0xBF	; 191
 1b4:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB5);
 1b6:	95 b1       	in	r25, 0x05	; 5
 1b8:	9f 7d       	andi	r25, 0xDF	; 223
 1ba:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB4);
 1bc:	95 b1       	in	r25, 0x05	; 5
 1be:	9f 7e       	andi	r25, 0xEF	; 239
 1c0:	95 b9       	out	0x05, r25	; 5
	             
	//se tem 1 no bitRecebido na posiÃ§Ã£o de D7 .. D4 dai coloca 1 lÃ¡          
    if (bitCmd & 1<<7) 
 1c2:	88 23       	and	r24, r24
 1c4:	1c f4       	brge	.+6      	; 0x1cc <write+0x22>
		lcdPort |= (1<<PORTB7);    
 1c6:	95 b1       	in	r25, 0x05	; 5
 1c8:	90 68       	ori	r25, 0x80	; 128
 1ca:	95 b9       	out	0x05, r25	; 5
                        
    if (bitCmd & 1<<6) 
 1cc:	86 ff       	sbrs	r24, 6
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <write+0x2c>
		lcdPort |= (1<<PORTB6);
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	90 64       	ori	r25, 0x40	; 64
 1d4:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<5) 
 1d6:	85 ff       	sbrs	r24, 5
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <write+0x36>
		lcdPort |= (1<<PORTB5);
 1da:	95 b1       	in	r25, 0x05	; 5
 1dc:	90 62       	ori	r25, 0x20	; 32
 1de:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<4) 
 1e0:	84 ff       	sbrs	r24, 4
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <write+0x40>
		lcdPort |= (1<<PORTB4);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	85 b9       	out	0x05, r24	; 5
		
    lcdPort |= (1<<lcd_E_bit);                   // Enable 1 (escreve)
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <write+0x48>
 1f6:	00 00       	nop
    _delay_us(1);                                  
    lcdPort &= ~(1<<lcd_E_bit);                  // Enable 0 
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <write+0x56>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <writeCharacter>:
    }
}


void writeCharacter(uint8_t caracter)
{
 208:	cf 93       	push	r28
 20a:	c8 2f       	mov	r28, r24
    lcdPort |= (1<<lcd_RS_bit);                // garante RS = 0
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 212:	85 b1       	in	r24, 0x05	; 5
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	85 b9       	out	0x05, r24	; 5
    write(caracter);                            // primeiros 4 bits
 218:	8c 2f       	mov	r24, r28
 21a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
    write(caracter << 4);                      // ultimos 4 bits
 21e:	8c 2f       	mov	r24, r28
 220:	82 95       	swap	r24
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
}
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <writeString>:
	// Display On
    writeInstruction(lcd_DisplayOn); 
}

void writeString(char text[])
{
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <writeString+0xa>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	8c 01       	movw	r16, r24
    volatile int i = 0;                            
 23c:	1a 82       	std	Y+2, r1	; 0x02
 23e:	19 82       	std	Y+1, r1	; 0x01
    while (text[i] != 0)
 240:	10 c0       	rjmp	.+32     	; 0x262 <writeString+0x36>
    {
        writeCharacter(text[i]);
 242:	e9 81       	ldd	r30, Y+1	; 0x01
 244:	fa 81       	ldd	r31, Y+2	; 0x02
 246:	e0 0f       	add	r30, r16
 248:	f1 1f       	adc	r31, r17
 24a:	80 81       	ld	r24, Z
 24c:	0e 94 04 01 	call	0x208	; 0x208 <writeCharacter>
        i++;
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	9a 81       	ldd	r25, Y+2	; 0x02
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	85 ed       	ldi	r24, 0xD5	; 213
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <writeString+0x30>
 260:	00 00       	nop
}

void writeString(char text[])
{
    volatile int i = 0;                            
    while (text[i] != 0)
 262:	e9 81       	ldd	r30, Y+1	; 0x01
 264:	fa 81       	ldd	r31, Y+2	; 0x02
 266:	e0 0f       	add	r30, r16
 268:	f1 1f       	adc	r31, r17
 26a:	80 81       	ld	r24, Z
 26c:	81 11       	cpse	r24, r1
 26e:	e9 cf       	rjmp	.-46     	; 0x242 <writeString+0x16>
    {
        writeCharacter(text[i]);
        i++;
        _delay_us(40);     
    }
}
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <writeInstruction>:
    write(caracter << 4);                      // ultimos 4 bits
}


void writeInstruction(uint8_t instruction)
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
    lcdPort &= ~(1<<lcd_RS_bit);                // garante RS = 0
 282:	85 b1       	in	r24, 0x05	; 5
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8d 7f       	andi	r24, 0xFD	; 253
 28c:	85 b9       	out	0x05, r24	; 5
    write(instruction);                    // primeiros 4 bits
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
    write(instruction << 4);               // ultimos 4 bits
 294:	8c 2f       	mov	r24, r28
 296:	82 95       	swap	r24
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
 29e:	85 ed       	ldi	r24, 0xD5	; 213
 2a0:	8a 95       	dec	r24
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <writeInstruction+0x22>
 2a4:	00 00       	nop
	 _delay_us(40); 
}
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <setup_lcd>:

void setup_lcd(){
	
	//configura os pinos da porta B para saida
	//f3 = 1111 0011 = B7 B6 ... B1 B0
	DDRB = 0xf3;
 2aa:	83 ef       	ldi	r24, 0xF3	; 243
 2ac:	84 b9       	out	0x04, r24	; 4
	
    lcdPort &= ~(1<<lcd_RS_bit);                //RS = 0 -> setar parametros de config
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	8e 7f       	andi	r24, 0xFE	; 254
 2b2:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                  // enable 0
 2b4:	85 b1       	in	r24, 0x05	; 5
 2b6:	8d 7f       	andi	r24, 0xFD	; 253
 2b8:	85 b9       	out	0x05, r24	; 5

	//Reset
    write(lcd_FunctionReset);
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	9c e9       	ldi	r25, 0x9C	; 156
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <setup_lcd+0x1a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <setup_lcd+0x20>
 2ca:	00 00       	nop
    _delay_ms(10);
 
    write(lcd_FunctionSet4bit);
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	95 ed       	ldi	r25, 0xD5	; 213
 2d4:	9a 95       	dec	r25
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <setup_lcd+0x2a>
 2d8:	00 00       	nop
    _delay_us(40);                                

	// Coloca modo 4 bits
    writeInstruction(lcd_FunctionSet4bit);
 2da:	88 e2       	ldi	r24, 0x28	; 40
 2dc:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>

	//Display Off
    writeInstruction(lcd_DisplayOff); 
 2e0:	88 e0       	ldi	r24, 0x08	; 8
 2e2:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
	
	//Limpa display
    writeInstruction(lcd_Clear);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
	
	//modo para escrita
    writeInstruction(lcd_EntryMode);
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
    
	// Display On
    writeInstruction(lcd_DisplayOn); 
 2f2:	8c e0       	ldi	r24, 0x0C	; 12
 2f4:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
 2f8:	08 95       	ret

000002fa <setTimer1_UmSeg>:

void setTimer1_UmSeg(){
	// 16 MHz -> 1 instrução = 62.5ns
	// Pre scaler de 256 -> 62500Hz logo 62500 contagens para 1 seg

	TCCR1A = 4; //modo comparação
 2fa:	84 e0       	ldi	r24, 0x04	; 4
 2fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x4; //pre scaler de 256
 300:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	TCNT1 = 0;  //contagem começa do zero
 304:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 308:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 62500; //até onde tem q contar
 30c:	84 e2       	ldi	r24, 0x24	; 36
 30e:	94 ef       	ldi	r25, 0xF4	; 244
 310:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 314:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1<<OCIE1A); //habilita interrupção por comparação em A
 318:	ef e6       	ldi	r30, 0x6F	; 111
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 83       	st	Z, r24

	sei();
 322:	78 94       	sei
 324:	08 95       	ret

00000326 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	writeString("."); //fica escrevendo uns pontos na tela pra gente ver +- se ta 1 seg
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 16 01 	call	0x22c	; 0x22c <writeString>
	if (teclaG == 12)
 350:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <teclaG>
 354:	8c 30       	cpi	r24, 0x0C	; 12
 356:	31 f4       	brne	.+12     	; 0x364 <__vector_11+0x3e>
		contTelaOnOff++;
 358:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 362:	02 c0       	rjmp	.+4      	; 0x368 <__vector_11+0x42>
	else
		contTelaOnOff = 0;
 364:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		
	if(contTelaOnOff == 3){ // se for # por 3 segundos
 368:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	91 f4       	brne	.+36     	; 0x394 <__vector_11+0x6e>
		if (telaOnOf){
 370:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 374:	88 23       	and	r24, r24
 376:	31 f0       	breq	.+12     	; 0x384 <__vector_11+0x5e>
			writeInstruction(lcd_DisplayOff); //desliga se tiver ligada 
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
			telaOnOf = 0;
 37e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 382:	06 c0       	rjmp	.+12     	; 0x390 <__vector_11+0x6a>
		}else{
			writeInstruction(lcd_DisplayOn); //liga se tiver desligada
 384:	8c e0       	ldi	r24, 0x0C	; 12
 386:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
			telaOnOf = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		contTelaOnOff = 0;
 390:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <main>:


int main(){
	
	//USART_INIT(UBRR);
	setup_lcd();
 3b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <setup_lcd>
	setupBotoes();
	setTimer1_UmSeg();
 3ba:	0e 94 7d 01 	call	0x2fa	; 0x2fa <setTimer1_UmSeg>
	*/
	
	
	while (1){
		
		teclaG = acao_tecla(teclaDebouce());
 3be:	0e 94 94 00 	call	0x128	; 0x128 <teclaDebouce>
 3c2:	0e 94 b2 00 	call	0x164	; 0x164 <acao_tecla>
 3c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <teclaG>
 3ca:	f9 cf       	rjmp	.-14     	; 0x3be <main+0x8>

000003cc <__tablejump2__>:
 3cc:	ee 0f       	add	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	05 90       	lpm	r0, Z+
 3d2:	f4 91       	lpm	r31, Z
 3d4:	e0 2d       	mov	r30, r0
 3d6:	09 94       	ijmp

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
