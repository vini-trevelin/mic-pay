
mic_pay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000342  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000342  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d0e  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e2  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f3  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000441  00000000  00000000  00002525  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	f4 00       	.word	0x00f4	; ????
  6a:	fb 00       	.word	0x00fb	; ????
  6c:	02 01       	movw	r0, r4
  6e:	09 01       	movw	r0, r18
  70:	10 01       	movw	r2, r0
  72:	17 01       	movw	r2, r14
  74:	1e 01       	movw	r2, r28
  76:	25 01       	movw	r4, r10
  78:	2c 01       	movw	r4, r24
  7a:	33 01       	movw	r6, r6
  7c:	3a 01       	movw	r6, r20
  7e:	41 01       	movw	r8, r2

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e2 e4       	ldi	r30, 0x42	; 66
  94:	f3 e0       	ldi	r31, 0x03	; 3
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a8 31       	cpi	r26, 0x18	; 24
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>
  a2:	0e 94 89 01 	call	0x312	; 0x312 <main>
  a6:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <tecla_lida>:

// Função para receber 8bits dados 2 bits parada
unsigned char USART_recebe(void){
	while(!(UCSR0A & (1<<RXC0)));							// espera algum dado ser recebido (registrador)
	return UDR0;											// retorna dado recebido
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	26 c0       	rjmp	.+76     	; 0x104 <tecla_lida+0x56>
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	97 b9       	out	0x07, r25	; 7
  be:	9a b1       	in	r25, 0x0a	; 10
  c0:	9f 78       	andi	r25, 0x8F	; 143
  c2:	9a b9       	out	0x0a, r25	; 10
  c4:	9a b1       	in	r25, 0x0a	; 10
  c6:	20 e1       	ldi	r18, 0x10	; 16
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	08 2e       	mov	r0, r24
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <tecla_lida+0x24>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <tecla_lida+0x20>
  d6:	29 2b       	or	r18, r25
  d8:	2a b9       	out	0x0a, r18	; 10
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	10 c0       	rjmp	.+32     	; 0xfe <tecla_lida+0x50>
  de:	26 b1       	in	r18, 0x06	; 6
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	09 2e       	mov	r0, r25
  e4:	02 c0       	rjmp	.+4      	; 0xea <tecla_lida+0x3c>
  e6:	35 95       	asr	r19
  e8:	27 95       	ror	r18
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <tecla_lida+0x38>
  ee:	20 fd       	sbrc	r18, 0
  f0:	05 c0       	rjmp	.+10     	; 0xfc <tecla_lida+0x4e>
  f2:	29 2f       	mov	r18, r25
  f4:	22 0f       	add	r18, r18
  f6:	92 0f       	add	r25, r18
  f8:	89 0f       	add	r24, r25
  fa:	08 95       	ret
  fc:	9f 5f       	subi	r25, 0xFF	; 255
  fe:	94 30       	cpi	r25, 0x04	; 4
 100:	70 f3       	brcs	.-36     	; 0xde <tecla_lida+0x30>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	c0 f2       	brcs	.-80     	; 0xb8 <tecla_lida+0xa>
 108:	84 e1       	ldi	r24, 0x14	; 20
 10a:	08 95       	ret

0000010c <write>:


void write(uint8_t bitCmd)
{
	//coloca zero na portaD
    lcdPort &= ~(1<<PORTB7);
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	9f 77       	andi	r25, 0x7F	; 127
 110:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB6);
 112:	95 b1       	in	r25, 0x05	; 5
 114:	9f 7b       	andi	r25, 0xBF	; 191
 116:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB5);
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	9f 7d       	andi	r25, 0xDF	; 223
 11c:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB4);
 11e:	95 b1       	in	r25, 0x05	; 5
 120:	9f 7e       	andi	r25, 0xEF	; 239
 122:	95 b9       	out	0x05, r25	; 5
	             
	//se tem 1 no bitRecebido na posiÃ§Ã£o de D7 .. D4 dai coloca 1 lÃ¡          
    if (bitCmd & 1<<7) 
 124:	88 23       	and	r24, r24
 126:	1c f4       	brge	.+6      	; 0x12e <write+0x22>
		lcdPort |= (1<<PORTB7);    
 128:	95 b1       	in	r25, 0x05	; 5
 12a:	90 68       	ori	r25, 0x80	; 128
 12c:	95 b9       	out	0x05, r25	; 5
                        
    if (bitCmd & 1<<6) 
 12e:	86 ff       	sbrs	r24, 6
 130:	03 c0       	rjmp	.+6      	; 0x138 <write+0x2c>
		lcdPort |= (1<<PORTB6);
 132:	95 b1       	in	r25, 0x05	; 5
 134:	90 64       	ori	r25, 0x40	; 64
 136:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<5) 
 138:	85 ff       	sbrs	r24, 5
 13a:	03 c0       	rjmp	.+6      	; 0x142 <write+0x36>
		lcdPort |= (1<<PORTB5);
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	90 62       	ori	r25, 0x20	; 32
 140:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<4) 
 142:	84 ff       	sbrs	r24, 4
 144:	03 c0       	rjmp	.+6      	; 0x14c <write+0x40>
		lcdPort |= (1<<PORTB4);
 146:	85 b1       	in	r24, 0x05	; 5
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	85 b9       	out	0x05, r24	; 5
		
    lcdPort |= (1<<lcd_E_bit);                   // Enable 1 (escreve)
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	00 00       	nop
    _delay_us(1);                                  
    lcdPort &= ~(1<<lcd_E_bit);                  // Enable 0 
 154:	85 b1       	in	r24, 0x05	; 5
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	85 b9       	out	0x05, r24	; 5
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <writeCharacter>:
    }
}


void writeCharacter(uint8_t caracter)
{
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
    lcdPort |= (1<<lcd_RS_bit);                // garante RS = 0
 162:	85 b1       	in	r24, 0x05	; 5
 164:	81 60       	ori	r24, 0x01	; 1
 166:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	85 b9       	out	0x05, r24	; 5
    write(caracter);                            // primeiros 4 bits
 16e:	8c 2f       	mov	r24, r28
 170:	0e 94 86 00 	call	0x10c	; 0x10c <write>
    write(caracter << 4);                      // ultimos 4 bits
 174:	8c 2f       	mov	r24, r28
 176:	82 95       	swap	r24
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	0e 94 86 00 	call	0x10c	; 0x10c <write>
}
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <writeString>:
	// Display On
    writeInstruction(lcd_DisplayOn); 
}

void writeString(char text[])
{
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	00 d0       	rcall	.+0      	; 0x18c <writeString+0xa>
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	8c 01       	movw	r16, r24
    volatile int i = 0;                            
 192:	1a 82       	std	Y+2, r1	; 0x02
 194:	19 82       	std	Y+1, r1	; 0x01
    while (text[i] != 0)
 196:	10 c0       	rjmp	.+32     	; 0x1b8 <writeString+0x36>
    {
        writeCharacter(text[i]);
 198:	e9 81       	ldd	r30, Y+1	; 0x01
 19a:	fa 81       	ldd	r31, Y+2	; 0x02
 19c:	e0 0f       	add	r30, r16
 19e:	f1 1f       	adc	r31, r17
 1a0:	80 81       	ld	r24, Z
 1a2:	0e 94 af 00 	call	0x15e	; 0x15e <writeCharacter>
        i++;
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	8a e1       	ldi	r24, 0x1A	; 26
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <writeString+0x30>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <writeString+0x36>
}

void writeString(char text[])
{
    volatile int i = 0;                            
    while (text[i] != 0)
 1b8:	e9 81       	ldd	r30, Y+1	; 0x01
 1ba:	fa 81       	ldd	r31, Y+2	; 0x02
 1bc:	e0 0f       	add	r30, r16
 1be:	f1 1f       	adc	r31, r17
 1c0:	80 81       	ld	r24, Z
 1c2:	81 11       	cpse	r24, r1
 1c4:	e9 cf       	rjmp	.-46     	; 0x198 <writeString+0x16>
    {
        writeCharacter(text[i]);
        i++;
        _delay_us(80);     
    }
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <valor_tecla>:
	}
	return TECLA_INVALIDA;
}

char valor_tecla(uint8_t num){ // tirar o writeString daqui quando formos usar de vdd, coloquei aqui sÃ³ pra mostrar a leitura no display
	switch (num){
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	8c 30       	cpi	r24, 0x0C	; 12
 1d8:	91 05       	cpc	r25, r1
 1da:	08 f0       	brcs	.+2      	; 0x1de <valor_tecla+0xa>
 1dc:	59 c0       	rjmp	.+178    	; 0x290 <valor_tecla+0xbc>
 1de:	fc 01       	movw	r30, r24
 1e0:	ec 5c       	subi	r30, 0xCC	; 204
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	0c 94 99 01 	jmp	0x332	; 0x332 <__tablejump2__>
		case 0:
		writeString("1");
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "1";
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	08 95       	ret
		case 1:
		writeString("2");
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "2";
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	08 95       	ret
		case 2:
		writeString("3");
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "3";
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	08 95       	ret
		case 3:
		writeString("4");
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "4";
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	08 95       	ret
		case 4:
		writeString("5");
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "5";
 228:	88 e0       	ldi	r24, 0x08	; 8
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	08 95       	ret
		case 5:
		writeString("6");
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "6";
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	08 95       	ret
		case 6:
		writeString("7");
 23c:	8c e0       	ldi	r24, 0x0C	; 12
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "7";
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	08 95       	ret
		case 7:
		writeString("8");
 24a:	8e e0       	ldi	r24, 0x0E	; 14
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "8";
 252:	8e e0       	ldi	r24, 0x0E	; 14
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	08 95       	ret
		case 8:
		writeString("9");
 258:	80 e1       	ldi	r24, 0x10	; 16
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "9";
 260:	80 e1       	ldi	r24, 0x10	; 16
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	08 95       	ret
		case 9:
		writeString("*");
 266:	82 e1       	ldi	r24, 0x12	; 18
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "*";
 26e:	82 e1       	ldi	r24, 0x12	; 18
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	08 95       	ret
		case 10:
		writeString("0");
 274:	84 e1       	ldi	r24, 0x14	; 20
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "0";
 27c:	84 e1       	ldi	r24, 0x14	; 20
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	08 95       	ret
		case 11:
		writeString("#");
 282:	86 e1       	ldi	r24, 0x16	; 22
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 c1 00 	call	0x182	; 0x182 <writeString>
		return "#";
 28a:	86 e1       	ldi	r24, 0x16	; 22
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	08 95       	ret
		default:
		return "";
 290:	87 e1       	ldi	r24, 0x17	; 23
 292:	91 e0       	ldi	r25, 0x01	; 1
	}
}
 294:	08 95       	ret

00000296 <writeInstruction>:
    write(caracter << 4);                      // ultimos 4 bits
}


void writeInstruction(uint8_t instruction)
{
 296:	cf 93       	push	r28
 298:	c8 2f       	mov	r28, r24
    lcdPort &= ~(1<<lcd_RS_bit);                // garante RS = 0
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	8e 7f       	andi	r24, 0xFE	; 254
 29e:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 2a0:	85 b1       	in	r24, 0x05	; 5
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	85 b9       	out	0x05, r24	; 5
    write(instruction);                    // primeiros 4 bits
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 86 00 	call	0x10c	; 0x10c <write>
    write(instruction << 4);               // ultimos 4 bits
 2ac:	8c 2f       	mov	r24, r28
 2ae:	82 95       	swap	r24
 2b0:	80 7f       	andi	r24, 0xF0	; 240
 2b2:	0e 94 86 00 	call	0x10c	; 0x10c <write>
 2b6:	8a e1       	ldi	r24, 0x1A	; 26
 2b8:	8a 95       	dec	r24
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <writeInstruction+0x22>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <writeInstruction+0x28>
	 _delay_us(80); 
}
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <lcd_init_4d>:

void lcd_init_4d(){
	
	//configura os pinos da porta D para saida
	//f3 = 1111 0011 = D7 D6 ... D1 D0
	DDRB = 0xf3;
 2c2:	83 ef       	ldi	r24, 0xF3	; 243
 2c4:	84 b9       	out	0x04, r24	; 4
	
    lcdPort &= ~(1<<lcd_RS_bit);                //RS = 0 -> setar parametros de config
 2c6:	85 b1       	in	r24, 0x05	; 5
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                  // enable 0
 2cc:	85 b1       	in	r24, 0x05	; 5
 2ce:	8d 7f       	andi	r24, 0xFD	; 253
 2d0:	85 b9       	out	0x05, r24	; 5

	//Reset
    write(lcd_FunctionReset);
 2d2:	80 e3       	ldi	r24, 0x30	; 48
 2d4:	0e 94 86 00 	call	0x10c	; 0x10c <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	83 ec       	ldi	r24, 0xC3	; 195
 2da:	99 e0       	ldi	r25, 0x09	; 9
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_init_4d+0x1a>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_init_4d+0x20>
 2e2:	00 00       	nop
    _delay_ms(10);
 
    write(lcd_FunctionSet4bit);
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	0e 94 86 00 	call	0x10c	; 0x10c <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	9a e1       	ldi	r25, 0x1A	; 26
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_init_4d+0x2a>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_init_4d+0x30>
    _delay_us(80);                                

	// Coloca modo 4 bits
    writeInstruction(lcd_FunctionSet4bit);
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	0e 94 4b 01 	call	0x296	; 0x296 <writeInstruction>

	//Display Off
    writeInstruction(lcd_DisplayOff); 
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	0e 94 4b 01 	call	0x296	; 0x296 <writeInstruction>
	
	//Limpa display
    writeInstruction(lcd_Clear);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 4b 01 	call	0x296	; 0x296 <writeInstruction>
	
	//modo para escrita
    writeInstruction(lcd_EntryMode);
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	0e 94 4b 01 	call	0x296	; 0x296 <writeInstruction>
    
	// Display On
    writeInstruction(lcd_DisplayOn); 
 30a:	8c e0       	ldi	r24, 0x0C	; 12
 30c:	0e 94 4b 01 	call	0x296	; 0x296 <writeInstruction>
 310:	08 95       	ret

00000312 <main>:
	}
#endif

int main(){
	//USART_INIT(UBRR);
	lcd_init_4d();
 312:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_init_4d>
	//char s2[] = "o cliente deve:";
	//char sfinal[10];
	
	while (1){
		
		teclaLida = valor_tecla(tecla_lida());
 316:	0e 94 57 00 	call	0xae	; 0xae <tecla_lida>
 31a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <valor_tecla>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	2f e7       	ldi	r18, 0x7F	; 127
 320:	8a e1       	ldi	r24, 0x1A	; 26
 322:	96 e0       	ldi	r25, 0x06	; 6
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x12>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x1c>
 32e:	00 00       	nop
 330:	f2 cf       	rjmp	.-28     	; 0x316 <main+0x4>

00000332 <__tablejump2__>:
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	05 90       	lpm	r0, Z+
 338:	f4 91       	lpm	r31, Z
 33a:	e0 2d       	mov	r30, r0
 33c:	09 94       	ijmp

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
