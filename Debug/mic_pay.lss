
mic_pay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000596  0000062a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000596  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800136  00800136  00000660  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e29  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000826  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050d  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000911  00000000  00000000  00002c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_11>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	bb 00       	.word	0x00bb	; ????
  6a:	d3 00       	.word	0x00d3	; ????
  6c:	bd 00       	.word	0x00bd	; ????
  6e:	bf 00       	.word	0x00bf	; ????
  70:	c1 00       	.word	0x00c1	; ????
  72:	c3 00       	.word	0x00c3	; ????
  74:	c5 00       	.word	0x00c5	; ????
  76:	c7 00       	.word	0x00c7	; ????
  78:	c9 00       	.word	0x00c9	; ????
  7a:	cb 00       	.word	0x00cb	; ????
  7c:	cd 00       	.word	0x00cd	; ????
  7e:	cf 00       	.word	0x00cf	; ????

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e6 e9       	ldi	r30, 0x96	; 150
  94:	f5 e0       	ldi	r31, 0x05	; 5
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a6 33       	cpi	r26, 0x36	; 54
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a6 e3       	ldi	r26, 0x36	; 54
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 84 02 	call	0x508	; 0x508 <main>
  b6:	0c 94 c9 02 	jmp	0x592	; 0x592 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <tecla_lida>:

// Função para receber 8bits dados 2 bits parada
unsigned char USART_recebe(void){
	while(!(UCSR0A & (1<<RXC0)));							// espera algum dado ser recebido (registrador)
	return UDR0;											// retorna dado recebido
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8f 78       	andi	r24, 0x8F	; 143
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	8f 60       	ori	r24, 0x0F	; 15
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	26 c0       	rjmp	.+76     	; 0x120 <tecla_lida+0x62>
  d4:	9a b1       	in	r25, 0x0a	; 10
  d6:	20 e1       	ldi	r18, 0x10	; 16
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	08 2e       	mov	r0, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <tecla_lida+0x24>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <tecla_lida+0x20>
  e6:	29 2b       	or	r18, r25
  e8:	2a b9       	out	0x0a, r18	; 10
  ea:	e7 ec       	ldi	r30, 0xC7	; 199
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <tecla_lida+0x30>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <tecla_lida+0x36>
  f4:	00 00       	nop
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	10 c0       	rjmp	.+32     	; 0x11a <tecla_lida+0x5c>
  fa:	26 b1       	in	r18, 0x06	; 6
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	09 2e       	mov	r0, r25
 100:	02 c0       	rjmp	.+4      	; 0x106 <tecla_lida+0x48>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <tecla_lida+0x44>
 10a:	20 fd       	sbrc	r18, 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <tecla_lida+0x5a>
 10e:	29 2f       	mov	r18, r25
 110:	22 0f       	add	r18, r18
 112:	92 0f       	add	r25, r18
 114:	89 0f       	add	r24, r25
 116:	08 95       	ret
 118:	9f 5f       	subi	r25, 0xFF	; 255
 11a:	94 30       	cpi	r25, 0x04	; 4
 11c:	70 f3       	brcs	.-36     	; 0xfa <tecla_lida+0x3c>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	c0 f2       	brcs	.-80     	; 0xd4 <tecla_lida+0x16>
 124:	89 e1       	ldi	r24, 0x19	; 25
 126:	08 95       	ret

00000128 <teclaDebouce>:
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	0e 94 5f 00 	call	0xbe	; 0xbe <tecla_lida>
 132:	18 2f       	mov	r17, r24
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	0f c0       	rjmp	.+30     	; 0x156 <teclaDebouce+0x2e>
 138:	8f e7       	ldi	r24, 0x7F	; 127
 13a:	9e e3       	ldi	r25, 0x3E	; 62
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <teclaDebouce+0x14>
 140:	00 c0       	rjmp	.+0      	; 0x142 <teclaDebouce+0x1a>
 142:	00 00       	nop
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <tecla_lida>
 148:	c8 2f       	mov	r28, r24
 14a:	18 13       	cpse	r17, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <teclaDebouce+0x2a>
 14e:	df 5f       	subi	r29, 0xFF	; 255
 150:	01 c0       	rjmp	.+2      	; 0x154 <teclaDebouce+0x2c>
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	1c 2f       	mov	r17, r28
 156:	da 30       	cpi	r29, 0x0A	; 10
 158:	78 f3       	brcs	.-34     	; 0x138 <teclaDebouce+0x10>
 15a:	8c 2f       	mov	r24, r28
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	08 95       	ret

00000164 <acao_tecla>:
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	8c 30       	cpi	r24, 0x0C	; 12
 168:	91 05       	cpc	r25, r1
 16a:	d8 f4       	brcc	.+54     	; 0x1a2 <acao_tecla+0x3e>
 16c:	fc 01       	movw	r30, r24
 16e:	ec 5c       	subi	r30, 0xCC	; 204
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	0c 94 c3 02 	jmp	0x586	; 0x586 <__tablejump2__>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	08 95       	ret
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	08 95       	ret
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	08 95       	ret
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	08 95       	ret
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	08 95       	ret
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	08 95       	ret
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	08 95       	ret
 192:	89 e0       	ldi	r24, 0x09	; 9
 194:	08 95       	ret
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	08 95       	ret
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	08 95       	ret
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	08 95       	ret
 1a2:	89 e1       	ldi	r24, 0x19	; 25
 1a4:	08 95       	ret
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	08 95       	ret

000001aa <write>:


void write(uint8_t bitCmd)
{
	//coloca zero na portaD
    lcdPort &= ~(1<<PORTB7);
 1aa:	95 b1       	in	r25, 0x05	; 5
 1ac:	9f 77       	andi	r25, 0x7F	; 127
 1ae:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB6);
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	9f 7b       	andi	r25, 0xBF	; 191
 1b4:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB5);
 1b6:	95 b1       	in	r25, 0x05	; 5
 1b8:	9f 7d       	andi	r25, 0xDF	; 223
 1ba:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB4);
 1bc:	95 b1       	in	r25, 0x05	; 5
 1be:	9f 7e       	andi	r25, 0xEF	; 239
 1c0:	95 b9       	out	0x05, r25	; 5
	             
	//se tem 1 no bitRecebido na posiÃ§Ã£o de D7 .. D4 dai coloca 1 lÃ¡          
    if (bitCmd & 1<<7) 
 1c2:	88 23       	and	r24, r24
 1c4:	1c f4       	brge	.+6      	; 0x1cc <write+0x22>
		lcdPort |= (1<<PORTB7);    
 1c6:	95 b1       	in	r25, 0x05	; 5
 1c8:	90 68       	ori	r25, 0x80	; 128
 1ca:	95 b9       	out	0x05, r25	; 5
                        
    if (bitCmd & 1<<6) 
 1cc:	86 ff       	sbrs	r24, 6
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <write+0x2c>
		lcdPort |= (1<<PORTB6);
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	90 64       	ori	r25, 0x40	; 64
 1d4:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<5) 
 1d6:	85 ff       	sbrs	r24, 5
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <write+0x36>
		lcdPort |= (1<<PORTB5);
 1da:	95 b1       	in	r25, 0x05	; 5
 1dc:	90 62       	ori	r25, 0x20	; 32
 1de:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<4) 
 1e0:	84 ff       	sbrs	r24, 4
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <write+0x40>
		lcdPort |= (1<<PORTB4);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	85 b9       	out	0x05, r24	; 5
		
    lcdPort |= (1<<lcd_E_bit);                   // Enable 1 (escreve)
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <write+0x48>
 1f6:	00 00       	nop
    _delay_us(1);                                  
    lcdPort &= ~(1<<lcd_E_bit);                  // Enable 0 
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <write+0x56>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <writeCharacter>:
    }
}


void writeCharacter(uint8_t caracter)
{
 208:	cf 93       	push	r28
 20a:	c8 2f       	mov	r28, r24
    lcdPort |= (1<<lcd_RS_bit);                // garante RS = 0
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 212:	85 b1       	in	r24, 0x05	; 5
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	85 b9       	out	0x05, r24	; 5
    write(caracter);                            // primeiros 4 bits
 218:	8c 2f       	mov	r24, r28
 21a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
    write(caracter << 4);                      // ultimos 4 bits
 21e:	8c 2f       	mov	r24, r28
 220:	82 95       	swap	r24
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
}
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <writeString>:
	// Display On
   // writeInstruction(lcd_DisplayOn); 
}

void writeString(char text[])
{
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <writeString+0xa>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	8c 01       	movw	r16, r24
    volatile int i = 0;                            
 23c:	1a 82       	std	Y+2, r1	; 0x02
 23e:	19 82       	std	Y+1, r1	; 0x01
    while (text[i] != 0)
 240:	10 c0       	rjmp	.+32     	; 0x262 <writeString+0x36>
    {
        writeCharacter(text[i]);
 242:	e9 81       	ldd	r30, Y+1	; 0x01
 244:	fa 81       	ldd	r31, Y+2	; 0x02
 246:	e0 0f       	add	r30, r16
 248:	f1 1f       	adc	r31, r17
 24a:	80 81       	ld	r24, Z
 24c:	0e 94 04 01 	call	0x208	; 0x208 <writeCharacter>
        i++;
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	9a 81       	ldd	r25, Y+2	; 0x02
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	85 ed       	ldi	r24, 0xD5	; 213
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <writeString+0x30>
 260:	00 00       	nop
}

void writeString(char text[])
{
    volatile int i = 0;                            
    while (text[i] != 0)
 262:	e9 81       	ldd	r30, Y+1	; 0x01
 264:	fa 81       	ldd	r31, Y+2	; 0x02
 266:	e0 0f       	add	r30, r16
 268:	f1 1f       	adc	r31, r17
 26a:	80 81       	ld	r24, Z
 26c:	81 11       	cpse	r24, r1
 26e:	e9 cf       	rjmp	.-46     	; 0x242 <writeString+0x16>
    {
        writeCharacter(text[i]);
        i++;
        _delay_us(40);     
    }
}
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <writeInstruction>:
    write(caracter << 4);                      // ultimos 4 bits
}


void writeInstruction(uint8_t instruction)
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
    lcdPort &= ~(1<<lcd_RS_bit);                // garante RS = 0
 282:	85 b1       	in	r24, 0x05	; 5
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8d 7f       	andi	r24, 0xFD	; 253
 28c:	85 b9       	out	0x05, r24	; 5
    write(instruction);                    // primeiros 4 bits
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
    write(instruction << 4);               // ultimos 4 bits
 294:	8c 2f       	mov	r24, r28
 296:	82 95       	swap	r24
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
 29e:	85 ed       	ldi	r24, 0xD5	; 213
 2a0:	8a 95       	dec	r24
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <writeInstruction+0x22>
 2a4:	00 00       	nop
	 _delay_us(40); 
}
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <setup_lcd>:

void setup_lcd(){
	
	//configura os pinos da porta B para saida
	//f3 = 1111 0011 = B7 B6 ... B1 B0
	DDRB = 0xf3;
 2aa:	83 ef       	ldi	r24, 0xF3	; 243
 2ac:	84 b9       	out	0x04, r24	; 4
	
    lcdPort &= ~(1<<lcd_RS_bit);                //RS = 0 -> setar parametros de config
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	8e 7f       	andi	r24, 0xFE	; 254
 2b2:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                  // enable 0
 2b4:	85 b1       	in	r24, 0x05	; 5
 2b6:	8d 7f       	andi	r24, 0xFD	; 253
 2b8:	85 b9       	out	0x05, r24	; 5

	//Reset
    write(lcd_FunctionReset);
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	9c e9       	ldi	r25, 0x9C	; 156
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <setup_lcd+0x1a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <setup_lcd+0x20>
 2ca:	00 00       	nop
    _delay_ms(10);
 
    write(lcd_FunctionSet4bit);
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	95 ed       	ldi	r25, 0xD5	; 213
 2d4:	9a 95       	dec	r25
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <setup_lcd+0x2a>
 2d8:	00 00       	nop
    _delay_us(40);                                

	// Coloca modo 4 bits
    writeInstruction(lcd_FunctionSet4bit);
 2da:	88 e2       	ldi	r24, 0x28	; 40
 2dc:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>

	//Display Off
    writeInstruction(lcd_DisplayOff); 
 2e0:	88 e0       	ldi	r24, 0x08	; 8
 2e2:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
	
	//Limpa display
    writeInstruction(lcd_Clear);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
	
	//modo para escrita
    writeInstruction(lcd_EntryMode);
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
 2f2:	08 95       	ret

000002f4 <__vector_11>:
//////////////////////////////////////////////////////////////////////////
						//INTERUPÇÕES//
//////////////////////////////////////////////////////////////////////////


ISR(TIMER1_COMPA_vect){
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	//writeString("."); //fica escrevendo uns pontos na tela pra gente ver +- se ta 1 seg
	if (teclaG == KEY_CONFIRMA)
 316:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <teclaG>
 31a:	8b 30       	cpi	r24, 0x0B	; 11
 31c:	31 f4       	brne	.+12     	; 0x32a <__vector_11+0x36>
	contTelaOnOff++;
 31e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <contTelaOnOff>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <contTelaOnOff>
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_11+0x3a>
	else
	contTelaOnOff = 0;
 32a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <contTelaOnOff>
	
	if(contTelaOnOff == 3){ // se for # por 3 segundos
 32e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <contTelaOnOff>
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	c1 f4       	brne	.+48     	; 0x366 <__vector_11+0x72>
		if (telaOnOf){
 336:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 33a:	88 23       	and	r24, r24
 33c:	49 f0       	breq	.+18     	; 0x350 <__vector_11+0x5c>
				writeInstruction(lcd_LineOne | lcd_SetCursor);
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
				writeInstruction(lcd_DisplayOff); //desliga se tiver ligada
 344:	88 e0       	ldi	r24, 0x08	; 8
 346:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
				telaOnOf = 0;
 34a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
 34e:	09 c0       	rjmp	.+18     	; 0x362 <__vector_11+0x6e>
			}else{
				writeInstruction(lcd_LineOne | lcd_SetCursor);
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
				writeInstruction(lcd_DisplayOn); //liga se tiver desligada
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
				telaOnOf = 1;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		}
		contTelaOnOff = 0;
 362:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <contTelaOnOff>
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <setTimer1_UmSeg>:

void setTimer1_UmSeg(){
	// 16 MHz -> 1 instrução = 62.5ns
	// Pre scaler de 256 -> 62500Hz logo 62500 contagens para 1 seg

	TCCR1A = 4; //modo comparação
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x4; //pre scaler de 256
 38e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0;  //contagem começa do zero
 392:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 396:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 62500; //até onde tem q contar
 39a:	84 e2       	ldi	r24, 0x24	; 36
 39c:	94 ef       	ldi	r25, 0xF4	; 244
 39e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1<<OCIE1A); //habilita interrupção por comparação em 
 3a6:	ef e6       	ldi	r30, 0x6F	; 111
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	80 83       	st	Z, r24
	sei(); // talvez colocar no mais ??
 3b0:	78 94       	sei
 3b2:	08 95       	ret

000003b4 <lerSenha>:
}

int lerSenha(){ // comecei a pensar no ler senha e tals. Não sei se passar tudo para inteiro é a melhor forma de montar a senha
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
	//também tem questão dos numeros de digitos na senha e a parte de apagar o caractere que não está funcionando 100% (não estou limpando onde estou pagando no display)
	char teclaG = acao_tecla(teclaDebouce());
 3be:	0e 94 94 00 	call	0x128	; 0x128 <teclaDebouce>
 3c2:	0e 94 b2 00 	call	0x164	; 0x164 <acao_tecla>
 3c6:	c8 2f       	mov	r28, r24
	char contador = 1;
	int senhaLida =0;
	writeInstruction(lcd_LineTwo | lcd_SetCursor);
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	0e 94 3f 01 	call	0x27e	; 0x27e <writeInstruction>
	char teclaAnterior=0;
 3ce:	f1 2c       	mov	r15, r1

int lerSenha(){ // comecei a pensar no ler senha e tals. Não sei se passar tudo para inteiro é a melhor forma de montar a senha
	//também tem questão dos numeros de digitos na senha e a parte de apagar o caractere que não está funcionando 100% (não estou limpando onde estou pagando no display)
	char teclaG = acao_tecla(teclaDebouce());
	char contador = 1;
	int senhaLida =0;
 3d0:	00 e0       	ldi	r16, 0x00	; 0
 3d2:	10 e0       	ldi	r17, 0x00	; 0
}

int lerSenha(){ // comecei a pensar no ler senha e tals. Não sei se passar tudo para inteiro é a melhor forma de montar a senha
	//também tem questão dos numeros de digitos na senha e a parte de apagar o caractere que não está funcionando 100% (não estou limpando onde estou pagando no display)
	char teclaG = acao_tecla(teclaDebouce());
	char contador = 1;
 3d4:	d1 e0       	ldi	r29, 0x01	; 1
	int senhaLida =0;
	writeInstruction(lcd_LineTwo | lcd_SetCursor);
	char teclaAnterior=0;
	while (teclaG != KEY_CONFIRMA || contador<= N_CARACSENHA){
 3d6:	8b c0       	rjmp	.+278    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		teclaG = teclaDebouce();
 3d8:	0e 94 94 00 	call	0x128	; 0x128 <teclaDebouce>
 3dc:	c8 2f       	mov	r28, r24
		if(teclaG!= TECLA_INVALIDA && teclaG!=KEY_CONFIRMA && teclaG !=KEY_APAGAR){
 3de:	89 31       	cpi	r24, 0x19	; 25
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <lerSenha+0x30>
 3e2:	47 c0       	rjmp	.+142    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3e4:	8b 30       	cpi	r24, 0x0B	; 11
 3e6:	09 f4       	brne	.+2      	; 0x3ea <lerSenha+0x36>
 3e8:	44 c0       	rjmp	.+136    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3ea:	89 30       	cpi	r24, 0x09	; 9
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <lerSenha+0x3c>
 3ee:	41 c0       	rjmp	.+130    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			if(teclaG!= KEY_0){
 3f0:	8a 30       	cpi	r24, 0x0A	; 10
 3f2:	c1 f1       	breq	.+112    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				switch(contador){
 3f4:	d2 30       	cpi	r29, 0x02	; 2
 3f6:	b9 f0       	breq	.+46     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3f8:	18 f4       	brcc	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fa:	d1 30       	cpi	r29, 0x01	; 1
 3fc:	31 f0       	breq	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fe:	32 c0       	rjmp	.+100    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 400:	d3 30       	cpi	r29, 0x03	; 3
 402:	e1 f0       	breq	.+56     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 404:	d4 30       	cpi	r29, 0x04	; 4
 406:	51 f1       	breq	.+84     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 408:	2d c0       	rjmp	.+90     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
					case 1:
					senhaLida+= (teclaG+1)*1000;
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	48 ee       	ldi	r20, 0xE8	; 232
 410:	53 e0       	ldi	r21, 0x03	; 3
 412:	84 9f       	mul	r24, r20
 414:	90 01       	movw	r18, r0
 416:	85 9f       	mul	r24, r21
 418:	30 0d       	add	r19, r0
 41a:	94 9f       	mul	r25, r20
 41c:	30 0d       	add	r19, r0
 41e:	11 24       	eor	r1, r1
 420:	02 0f       	add	r16, r18
 422:	13 1f       	adc	r17, r19
					break;
 424:	1f c0       	rjmp	.+62     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
					case 2:
					senhaLida+= (teclaG+1)*100;
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	44 e6       	ldi	r20, 0x64	; 100
 42c:	48 9f       	mul	r20, r24
 42e:	90 01       	movw	r18, r0
 430:	49 9f       	mul	r20, r25
 432:	30 0d       	add	r19, r0
 434:	11 24       	eor	r1, r1
 436:	02 0f       	add	r16, r18
 438:	13 1f       	adc	r17, r19
					break;
 43a:	14 c0       	rjmp	.+40     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
					case 3:
					senhaLida+= (teclaG+1)*10;
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	9c 01       	movw	r18, r24
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	82 0f       	add	r24, r18
 454:	93 1f       	adc	r25, r19
 456:	08 0f       	add	r16, r24
 458:	19 1f       	adc	r17, r25
					break;
 45a:	04 c0       	rjmp	.+8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
					case 4:
					senhaLida+= (teclaG+1)*1;
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	08 0f       	add	r16, r24
 462:	19 1f       	adc	r17, r25
					default:
					senhaLida+=0;
					break;
				}
			}
			contador++;
 464:	df 5f       	subi	r29, 0xFF	; 255
			teclaAnterior =teclaG;
			writeString("*");
 466:	87 e0       	ldi	r24, 0x07	; 7
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 16 01 	call	0x22c	; 0x22c <writeString>
					senhaLida+=0;
					break;
				}
			}
			contador++;
			teclaAnterior =teclaG;
 46e:	fc 2e       	mov	r15, r28
			writeString("*");
 470:	3e c0       	rjmp	.+124    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		}
		else if(teclaG == KEY_APAGAR){
 472:	c9 30       	cpi	r28, 0x09	; 9
 474:	e1 f5       	brne	.+120    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			if(contador>1){
 476:	d2 30       	cpi	r29, 0x02	; 2
 478:	d0 f1       	brcs	.+116    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
				contador --;
 47a:	d1 50       	subi	r29, 0x01	; 1
				switch(contador){
 47c:	d2 30       	cpi	r29, 0x02	; 2
 47e:	c1 f0       	breq	.+48     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 480:	18 f4       	brcc	.+6      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 482:	d1 30       	cpi	r29, 0x01	; 1
 484:	31 f0       	breq	.+12     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 486:	33 c0       	rjmp	.+102    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 488:	d3 30       	cpi	r29, 0x03	; 3
 48a:	f9 f0       	breq	.+62     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 48c:	d4 30       	cpi	r29, 0x04	; 4
 48e:	51 f1       	breq	.+84     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 490:	2e c0       	rjmp	.+92     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
					case 1:
					senhaLida-= (teclaAnterior+1)*1000;
 492:	8f 2d       	mov	r24, r15
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	48 e1       	ldi	r20, 0x18	; 24
 49a:	5c ef       	ldi	r21, 0xFC	; 252
 49c:	84 9f       	mul	r24, r20
 49e:	90 01       	movw	r18, r0
 4a0:	85 9f       	mul	r24, r21
 4a2:	30 0d       	add	r19, r0
 4a4:	94 9f       	mul	r25, r20
 4a6:	30 0d       	add	r19, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	02 0f       	add	r16, r18
 4ac:	13 1f       	adc	r17, r19
					break;
 4ae:	1f c0       	rjmp	.+62     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
					case 2:
					senhaLida-= (teclaAnterior+1)*100;
 4b0:	2f 2d       	mov	r18, r15
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	2f 5f       	subi	r18, 0xFF	; 255
 4b6:	3f 4f       	sbci	r19, 0xFF	; 255
 4b8:	4c e9       	ldi	r20, 0x9C	; 156
 4ba:	42 03       	mulsu	r20, r18
 4bc:	c0 01       	movw	r24, r0
 4be:	43 9f       	mul	r20, r19
 4c0:	90 0d       	add	r25, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	08 0f       	add	r16, r24
 4c6:	19 1f       	adc	r17, r25
					break;
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
					case 3:
					senhaLida-= (teclaAnterior+1)*10;
 4ca:	2f 2d       	mov	r18, r15
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	46 ef       	ldi	r20, 0xF6	; 246
 4d4:	42 03       	mulsu	r20, r18
 4d6:	c0 01       	movw	r24, r0
 4d8:	43 9f       	mul	r20, r19
 4da:	90 0d       	add	r25, r0
 4dc:	11 24       	eor	r1, r1
 4de:	08 0f       	add	r16, r24
 4e0:	19 1f       	adc	r17, r25
					break;
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
					case 4:
					senhaLida-= (teclaAnterior+1)*1;
 4e4:	8f 2d       	mov	r24, r15
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	08 1b       	sub	r16, r24
 4ec:	19 0b       	sbc	r17, r25
	char teclaG = acao_tecla(teclaDebouce());
	char contador = 1;
	int senhaLida =0;
	writeInstruction(lcd_LineTwo | lcd_SetCursor);
	char teclaAnterior=0;
	while (teclaG != KEY_CONFIRMA || contador<= N_CARACSENHA){
 4ee:	cb 30       	cpi	r28, 0x0B	; 11
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4f2:	72 cf       	rjmp	.-284    	; 0x3d8 <lerSenha+0x24>
 4f4:	d5 30       	cpi	r29, 0x05	; 5
 4f6:	08 f4       	brcc	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f8:	6f cf       	rjmp	.-290    	; 0x3d8 <lerSenha+0x24>
			}
		}
	}
	//writeString("SenhaLida");
	return senhaLida;
}
 4fa:	c8 01       	movw	r24, r16
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	08 95       	ret

00000508 <main>:



int main(){
 508:	cf 93       	push	r28
	
	//USART_INIT(UBRR);
	setup_lcd();
 50a:	0e 94 55 01 	call	0x2aa	; 0x2aa <setup_lcd>
	setupBotoes();
	setTimer1_UmSeg();
 50e:	0e 94 c4 01 	call	0x388	; 0x388 <setTimer1_UmSeg>
	
	Implementar debounce (e torcer para continuar funcionando)
	*/
	
	
	while (!telaOnOf){// lcd incia desligado e fico lendo a tecla caso # por 3s mais liga o LCD
 512:	04 c0       	rjmp	.+8      	; 0x51c <main+0x14>
		teclaG = teclaDebouce();
 514:	0e 94 94 00 	call	0x128	; 0x128 <teclaDebouce>
 518:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <teclaG>
	
	Implementar debounce (e torcer para continuar funcionando)
	*/
	
	
	while (!telaOnOf){// lcd incia desligado e fico lendo a tecla caso # por 3s mais liga o LCD
 51c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 520:	88 23       	and	r24, r24
 522:	c1 f3       	breq	.-16     	; 0x514 <main+0xc>
		teclaG = teclaDebouce();
	}
	teclaG =TECLA_INVALIDA;
 524:	89 e1       	ldi	r24, 0x19	; 25
 526:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <teclaG>
	writeString("Insira a Senha"); //chamada de senha inicial
 52a:	89 e0       	ldi	r24, 0x09	; 9
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 16 01 	call	0x22c	; 0x22c <writeString>
	char senhaValida = 0;
 532:	c0 e0       	ldi	r28, 0x00	; 0
	int senhaLida = 0;
	while(!senhaValida){
 534:	22 c0       	rjmp	.+68     	; 0x57a <main+0x72>
		senhaLida= lerSenha();
 536:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lerSenha>
		if (senhaLida == SENHAADM){
 53a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <SENHAADM>
 53e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <SENHAADM+0x1>
 542:	82 17       	cp	r24, r18
 544:	93 07       	cpc	r25, r19
 546:	31 f4       	brne	.+12     	; 0x554 <main+0x4c>
			senhaValida =1;
			writeString("bem vindo Adm");
 548:	88 e1       	ldi	r24, 0x18	; 24
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	0e 94 16 01 	call	0x22c	; 0x22c <writeString>
	char senhaValida = 0;
	int senhaLida = 0;
	while(!senhaValida){
		senhaLida= lerSenha();
		if (senhaLida == SENHAADM){
			senhaValida =1;
 550:	c1 e0       	ldi	r28, 0x01	; 1
 552:	13 c0       	rjmp	.+38     	; 0x57a <main+0x72>
			writeString("bem vindo Adm");
		}
		else if(senhaLida == SENHAUSER1 || senhaLida ==SENHAUSER2){
 554:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SENHAUSER1>
 558:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <SENHAUSER1+0x1>
 55c:	82 17       	cp	r24, r18
 55e:	93 07       	cpc	r25, r19
 560:	39 f0       	breq	.+14     	; 0x570 <main+0x68>
 562:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 566:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 56a:	82 17       	cp	r24, r18
 56c:	93 07       	cpc	r25, r19
 56e:	29 f4       	brne	.+10     	; 0x57a <main+0x72>
			senhaValida =1;
			writeString("bem vindo USER");
 570:	86 e2       	ldi	r24, 0x26	; 38
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 16 01 	call	0x22c	; 0x22c <writeString>
		if (senhaLida == SENHAADM){
			senhaValida =1;
			writeString("bem vindo Adm");
		}
		else if(senhaLida == SENHAUSER1 || senhaLida ==SENHAUSER2){
			senhaValida =1;
 578:	c1 e0       	ldi	r28, 0x01	; 1
	}
	teclaG =TECLA_INVALIDA;
	writeString("Insira a Senha"); //chamada de senha inicial
	char senhaValida = 0;
	int senhaLida = 0;
	while(!senhaValida){
 57a:	cc 23       	and	r28, r28
 57c:	e1 f2       	breq	.-72     	; 0x536 <main+0x2e>
	}
	//while(1){
		//pensar o resto aqui
		
	//}
}
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <__tablejump2__>:
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	05 90       	lpm	r0, Z+
 58c:	f4 91       	lpm	r31, Z
 58e:	e0 2d       	mov	r30, r0
 590:	09 94       	ijmp

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>
