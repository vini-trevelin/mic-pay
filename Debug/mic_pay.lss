
mic_pay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  0000044a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c91  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dd  00000000  00000000  000011e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067e  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cf  00000000  00000000  0000266a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002c39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_11>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	9d 00       	.word	0x009d	; ????
  6a:	b5 00       	.word	0x00b5	; ????
  6c:	9f 00       	.word	0x009f	; ????
  6e:	a1 00       	.word	0x00a1	; ????
  70:	a3 00       	.word	0x00a3	; ????
  72:	a5 00       	.word	0x00a5	; ????
  74:	a7 00       	.word	0x00a7	; ????
  76:	a9 00       	.word	0x00a9	; ????
  78:	ab 00       	.word	0x00ab	; ????
  7a:	ad 00       	.word	0x00ad	; ????
  7c:	af 00       	.word	0x00af	; ????
  7e:	b1 00       	.word	0x00b1	; ????

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e2 eb       	ldi	r30, 0xB2	; 178
  94:	f3 e0       	ldi	r31, 0x03	; 3
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a4 e0       	ldi	r26, 0x04	; 4
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a5 30       	cpi	r26, 0x05	; 5
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  b6:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <tecla_lida>:

// Função para receber 8bits dados 2 bits parada
unsigned char USART_recebe(void){
	while(!(UCSR0A & (1<<RXC0)));							// espera algum dado ser recebido (registrador)
	return UDR0;											// retorna dado recebido
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8f 78       	andi	r24, 0x8F	; 143
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	8f 60       	ori	r24, 0x0F	; 15
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	26 c0       	rjmp	.+76     	; 0x120 <tecla_lida+0x62>
  d4:	9a b1       	in	r25, 0x0a	; 10
  d6:	20 e1       	ldi	r18, 0x10	; 16
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	08 2e       	mov	r0, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <tecla_lida+0x24>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <tecla_lida+0x20>
  e6:	29 2b       	or	r18, r25
  e8:	2a b9       	out	0x0a, r18	; 10
  ea:	e7 ec       	ldi	r30, 0xC7	; 199
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <tecla_lida+0x30>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <tecla_lida+0x36>
  f4:	00 00       	nop
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	10 c0       	rjmp	.+32     	; 0x11a <tecla_lida+0x5c>
  fa:	26 b1       	in	r18, 0x06	; 6
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	09 2e       	mov	r0, r25
 100:	02 c0       	rjmp	.+4      	; 0x106 <tecla_lida+0x48>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <tecla_lida+0x44>
 10a:	20 fd       	sbrc	r18, 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <tecla_lida+0x5a>
 10e:	29 2f       	mov	r18, r25
 110:	22 0f       	add	r18, r18
 112:	92 0f       	add	r25, r18
 114:	89 0f       	add	r24, r25
 116:	08 95       	ret
 118:	9f 5f       	subi	r25, 0xFF	; 255
 11a:	94 30       	cpi	r25, 0x04	; 4
 11c:	70 f3       	brcs	.-36     	; 0xfa <tecla_lida+0x3c>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	c0 f2       	brcs	.-80     	; 0xd4 <tecla_lida+0x16>
 124:	84 e1       	ldi	r24, 0x14	; 20
 126:	08 95       	ret

00000128 <acao_tecla>:
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	8c 30       	cpi	r24, 0x0C	; 12
 12c:	91 05       	cpc	r25, r1
 12e:	d8 f4       	brcc	.+54     	; 0x166 <acao_tecla+0x3e>
 130:	fc 01       	movw	r30, r24
 132:	ec 5c       	subi	r30, 0xCC	; 204
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__tablejump2__>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	08 95       	ret
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	08 95       	ret
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	08 95       	ret
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	08 95       	ret
 14e:	87 e0       	ldi	r24, 0x07	; 7
 150:	08 95       	ret
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	08 95       	ret
 156:	89 e0       	ldi	r24, 0x09	; 9
 158:	08 95       	ret
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	08 95       	ret
 15e:	8b e0       	ldi	r24, 0x0B	; 11
 160:	08 95       	ret
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	08 95       	ret
 166:	84 e1       	ldi	r24, 0x14	; 20
 168:	08 95       	ret
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	08 95       	ret

0000016e <write>:


void write(uint8_t bitCmd)
{
	//coloca zero na portaD
    lcdPort &= ~(1<<PORTB7);
 16e:	95 b1       	in	r25, 0x05	; 5
 170:	9f 77       	andi	r25, 0x7F	; 127
 172:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB6);
 174:	95 b1       	in	r25, 0x05	; 5
 176:	9f 7b       	andi	r25, 0xBF	; 191
 178:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB5);
 17a:	95 b1       	in	r25, 0x05	; 5
 17c:	9f 7d       	andi	r25, 0xDF	; 223
 17e:	95 b9       	out	0x05, r25	; 5
	lcdPort &= ~(1<<PORTB4);
 180:	95 b1       	in	r25, 0x05	; 5
 182:	9f 7e       	andi	r25, 0xEF	; 239
 184:	95 b9       	out	0x05, r25	; 5
	             
	//se tem 1 no bitRecebido na posiÃ§Ã£o de D7 .. D4 dai coloca 1 lÃ¡          
    if (bitCmd & 1<<7) 
 186:	88 23       	and	r24, r24
 188:	1c f4       	brge	.+6      	; 0x190 <write+0x22>
		lcdPort |= (1<<PORTB7);    
 18a:	95 b1       	in	r25, 0x05	; 5
 18c:	90 68       	ori	r25, 0x80	; 128
 18e:	95 b9       	out	0x05, r25	; 5
                        
    if (bitCmd & 1<<6) 
 190:	86 ff       	sbrs	r24, 6
 192:	03 c0       	rjmp	.+6      	; 0x19a <write+0x2c>
		lcdPort |= (1<<PORTB6);
 194:	95 b1       	in	r25, 0x05	; 5
 196:	90 64       	ori	r25, 0x40	; 64
 198:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<5) 
 19a:	85 ff       	sbrs	r24, 5
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <write+0x36>
		lcdPort |= (1<<PORTB5);
 19e:	95 b1       	in	r25, 0x05	; 5
 1a0:	90 62       	ori	r25, 0x20	; 32
 1a2:	95 b9       	out	0x05, r25	; 5

    if (bitCmd & 1<<4) 
 1a4:	84 ff       	sbrs	r24, 4
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <write+0x40>
		lcdPort |= (1<<PORTB4);
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	85 b9       	out	0x05, r24	; 5
		
    lcdPort |= (1<<lcd_E_bit);                   // Enable 1 (escreve)
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <write+0x48>
 1ba:	00 00       	nop
    _delay_us(1);                                  
    lcdPort &= ~(1<<lcd_E_bit);                  // Enable 0 
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <write+0x56>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <writeCharacter>:
    }
}


void writeCharacter(uint8_t caracter)
{
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
    lcdPort |= (1<<lcd_RS_bit);                // garante RS = 0
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	8d 7f       	andi	r24, 0xFD	; 253
 1da:	85 b9       	out	0x05, r24	; 5
    write(caracter);                            // primeiros 4 bits
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 b7 00 	call	0x16e	; 0x16e <write>
    write(caracter << 4);                      // ultimos 4 bits
 1e2:	8c 2f       	mov	r24, r28
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <write>
}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <writeString>:
	// Display On
    writeInstruction(lcd_DisplayOn); 
}

void writeString(char text[])
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <writeString+0xa>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	8c 01       	movw	r16, r24
    volatile int i = 0;                            
 200:	1a 82       	std	Y+2, r1	; 0x02
 202:	19 82       	std	Y+1, r1	; 0x01
    while (text[i] != 0)
 204:	10 c0       	rjmp	.+32     	; 0x226 <writeString+0x36>
    {
        writeCharacter(text[i]);
 206:	e9 81       	ldd	r30, Y+1	; 0x01
 208:	fa 81       	ldd	r31, Y+2	; 0x02
 20a:	e0 0f       	add	r30, r16
 20c:	f1 1f       	adc	r31, r17
 20e:	80 81       	ld	r24, Z
 210:	0e 94 e6 00 	call	0x1cc	; 0x1cc <writeCharacter>
        i++;
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	9a 81       	ldd	r25, Y+2	; 0x02
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	9a 83       	std	Y+2, r25	; 0x02
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	85 ed       	ldi	r24, 0xD5	; 213
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <writeString+0x30>
 224:	00 00       	nop
}

void writeString(char text[])
{
    volatile int i = 0;                            
    while (text[i] != 0)
 226:	e9 81       	ldd	r30, Y+1	; 0x01
 228:	fa 81       	ldd	r31, Y+2	; 0x02
 22a:	e0 0f       	add	r30, r16
 22c:	f1 1f       	adc	r31, r17
 22e:	80 81       	ld	r24, Z
 230:	81 11       	cpse	r24, r1
 232:	e9 cf       	rjmp	.-46     	; 0x206 <writeString+0x16>
    {
        writeCharacter(text[i]);
        i++;
        _delay_us(40);     
    }
}
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <writeInstruction>:
    write(caracter << 4);                      // ultimos 4 bits
}


void writeInstruction(uint8_t instruction)
{
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
    lcdPort &= ~(1<<lcd_RS_bit);                // garante RS = 0
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8e 7f       	andi	r24, 0xFE	; 254
 24a:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	8d 7f       	andi	r24, 0xFD	; 253
 250:	85 b9       	out	0x05, r24	; 5
    write(instruction);                    // primeiros 4 bits
 252:	8c 2f       	mov	r24, r28
 254:	0e 94 b7 00 	call	0x16e	; 0x16e <write>
    write(instruction << 4);               // ultimos 4 bits
 258:	8c 2f       	mov	r24, r28
 25a:	82 95       	swap	r24
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	0e 94 b7 00 	call	0x16e	; 0x16e <write>
 262:	85 ed       	ldi	r24, 0xD5	; 213
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <writeInstruction+0x22>
 268:	00 00       	nop
	 _delay_us(40); 
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <setup_lcd>:

void setup_lcd(){
	
	//configura os pinos da porta B para saida
	//f3 = 1111 0011 = B7 B6 ... B1 B0
	DDRB = 0xf3;
 26e:	83 ef       	ldi	r24, 0xF3	; 243
 270:	84 b9       	out	0x04, r24	; 4
	
    lcdPort &= ~(1<<lcd_RS_bit);                //RS = 0 -> setar parametros de config
 272:	85 b1       	in	r24, 0x05	; 5
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	85 b9       	out	0x05, r24	; 5
    lcdPort &= ~(1<<lcd_E_bit);                  // enable 0
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	85 b9       	out	0x05, r24	; 5

	//Reset
    write(lcd_FunctionReset);
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	0e 94 b7 00 	call	0x16e	; 0x16e <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	9c e9       	ldi	r25, 0x9C	; 156
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <setup_lcd+0x1a>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <setup_lcd+0x20>
 28e:	00 00       	nop
    _delay_ms(10);
 
    write(lcd_FunctionSet4bit);
 290:	88 e2       	ldi	r24, 0x28	; 40
 292:	0e 94 b7 00 	call	0x16e	; 0x16e <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	95 ed       	ldi	r25, 0xD5	; 213
 298:	9a 95       	dec	r25
 29a:	f1 f7       	brne	.-4      	; 0x298 <setup_lcd+0x2a>
 29c:	00 00       	nop
    _delay_us(40);                                

	// Coloca modo 4 bits
    writeInstruction(lcd_FunctionSet4bit);
 29e:	88 e2       	ldi	r24, 0x28	; 40
 2a0:	0e 94 21 01 	call	0x242	; 0x242 <writeInstruction>

	//Display Off
    writeInstruction(lcd_DisplayOff); 
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	0e 94 21 01 	call	0x242	; 0x242 <writeInstruction>
	
	//Limpa display
    writeInstruction(lcd_Clear);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 21 01 	call	0x242	; 0x242 <writeInstruction>
	
	//modo para escrita
    writeInstruction(lcd_EntryMode);
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	0e 94 21 01 	call	0x242	; 0x242 <writeInstruction>
    
	// Display On
    writeInstruction(lcd_DisplayOn); 
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	0e 94 21 01 	call	0x242	; 0x242 <writeInstruction>
 2bc:	08 95       	ret

000002be <setTimer1_UmSeg>:

void setTimer1_UmSeg(){
	// 16 MHz -> 1 instrução = 62.5ns
	// Pre scaler de 256 -> 62500Hz logo 62500 contagens para 1 seg

	TCCR1A = 4; //modo comparação
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x4; //pre scaler de 256
 2c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	TCNT1 = 0;  //contagem começa do zero
 2c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 62500; //até onde tem q contar
 2d0:	84 e2       	ldi	r24, 0x24	; 36
 2d2:	94 ef       	ldi	r25, 0xF4	; 244
 2d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1<<OCIE1A); //habilita interrupção por comparação em A
 2dc:	ef e6       	ldi	r30, 0x6F	; 111
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	80 83       	st	Z, r24

	sei();
 2e6:	78 94       	sei
 2e8:	08 95       	ret

000002ea <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
	writeString(".");
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <writeString>
	if (teclaG == 12)
 314:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <teclaG>
 318:	8c 30       	cpi	r24, 0x0C	; 12
 31a:	31 f4       	brne	.+12     	; 0x328 <__vector_11+0x3e>
		contTelaOnOff++;
 31c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 326:	02 c0       	rjmp	.+4      	; 0x32c <__vector_11+0x42>
	else
		contTelaOnOff = 0;
 328:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		
	if(contTelaOnOff == 3){ // se for # por 3 segundos
 32c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	91 f4       	brne	.+36     	; 0x358 <__vector_11+0x6e>
		if (telaOnOf){
 334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 338:	88 23       	and	r24, r24
 33a:	31 f0       	breq	.+12     	; 0x348 <__vector_11+0x5e>
			writeInstruction(lcd_DisplayOff); //desliga se tiver ligada 
 33c:	88 e0       	ldi	r24, 0x08	; 8
 33e:	0e 94 21 01 	call	0x242	; 0x242 <writeInstruction>
			telaOnOf = 0;
 342:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 346:	06 c0       	rjmp	.+12     	; 0x354 <__vector_11+0x6a>
		}else{
			writeInstruction(lcd_DisplayOn); //liga se tiver desligada
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 21 01 	call	0x242	; 0x242 <writeInstruction>
			telaOnOf = 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		contTelaOnOff = 0;
 354:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <main>:

int main(){
	// Se começar a escrever 1 sem parar no inicio é só dar Reload que volta funcionar
	
	//USART_INIT(UBRR);
	setup_lcd();
 37a:	0e 94 37 01 	call	0x26e	; 0x26e <setup_lcd>
	setupBotoes();
	setTimer1_UmSeg();
 37e:	0e 94 5f 01 	call	0x2be	; 0x2be <setTimer1_UmSeg>
	*/
	
	
	while (1){
		
		teclaG = acao_tecla(tecla_lida());
 382:	0e 94 5f 00 	call	0xbe	; 0xbe <tecla_lida>
 386:	0e 94 94 00 	call	0x128	; 0x128 <acao_tecla>
 38a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <teclaG>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	80 e7       	ldi	r24, 0x70	; 112
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x1a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x24>
 39e:	00 00       	nop
 3a0:	f0 cf       	rjmp	.-32     	; 0x382 <main+0x8>

000003a2 <__tablejump2__>:
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	05 90       	lpm	r0, Z+
 3a8:	f4 91       	lpm	r31, Z
 3aa:	e0 2d       	mov	r30, r0
 3ac:	09 94       	ijmp

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
